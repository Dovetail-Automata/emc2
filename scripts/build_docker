#!/bin/bash -e
#
# Build/cross-build Machinekit in Docker
#
# This script can be run manually or in Travis CI.  Sample manual
# usage, `$PWD` is the `src/` directory:
#
# .travis/docker_build.sh

###########################################################
# Configuration from environment, CL args and defaults
CMD=${CMD:-shell}
IMAGE=${IMAGE:-zultron/mk-cross-builder}
TAG=${TAG:-amd64}
JOBS=${JOBS:-4}
BUILD_SOURCE=${BUILD_SOURCE:-true}  # update Changelog & source pkg

# CL arguments
while getopts c:i:t:nh? opt; do
    case "$opt" in
	c) CMD=$OPTARG ;;
	i) IMAGE=$OPTARG ;;
	t) TAG=$OPTARG ;;
	n) BUILD_SOURCE=false ;;
	?|h|*) echo "Usage:  $0 [ -i DOCKER-IMAGE ] [ -t DOCKER-TAG ]" \
	    "[ -c ( deb [ -n ] | test | [ shell ] [ COMMAND ARG ... ] ) ]" >&2
	    exit 1 ;;
    esac
done
shift $(($OPTIND - 1))

###########################################################
# Set build parameters

case ${TAG} in
    amd64)
	BUILD_OPTS='-b'                  # Build all binary packages
	RUN_TESTS='runtests tests'       # Run tests on build arch
	;;
    i386)                                # Machine arch: i386
	BUILD_OPTS="-a i386"             # - Set machine arch
	;;&
    armhf|raspbian)                      # Machine arch: armhf
	BUILD_OPTS="-a armhf"            # - Set machine arch
	;;&
    i386|armhf|raspbian)                 # Cross-compile/foreign arch
	BUILD_OPTS+=" -B"                # - Only build arch binary packages
	BUILD_OPTS+=" -d"                # - Root fs missing build deps; force
	RUN_TESTS='true'                 # - Don't run tests
	BUILD_SOURCE=false               # - Don't build source package
	;;
    *) echo "Warning:  unknown tag '${TAG}'" >&2 ;;
esac

# DH_VERBOSE turn on verbose package debuilds
! ${MK_PACKAGE_VERBOSE:-false} || export DH_VERBOSE=1

# Parallel jobs in `make`
export DEB_BUILD_OPTIONS="parallel=${JOBS}"

# UID/GID to carry into Docker
DUID=`id -u`; DGID=`id -g`

# Bind source directory:  parent of $PWD for packages
BIND_SOURCE_DIR="$(readlink -f $PWD/..)"

# Directory containing this script
SCRIPT_DIR="$(dirname $0)"

# Make TAG accessible to called programs
export TAG

###########################################################
# Generate command line

declare -a BUILD_CL DOCKER_EXTRA_OPTS
case $CMD in
    "shell"|"") # Interactive shell (default)
	DOCKER_EXTRA_OPTS=( --privileged )
	if test -z "$*"; then
	    BUILD_CL=( bash -i )
	else
	    BUILD_CL=( "$@" )
	fi
	;;
    "deb") # Build Debian packages
	DOCKER_EXTRA_OPTS=(
	    -e DEB_BUILD_OPTIONS=$DEB_BUILD_OPTIONS
	    -e DH_VERBOSE=$DH_VERBOSE
	)
	BUILD_CL=( bash -xec "
            # configure source package
            debian/configure -prxt 8.6;

            if ${BUILD_SOURCE}; then
                # update Changelog and build source package
                $SCRIPT_DIR/build_source_package
            fi

            # build binary packages
            dpkg-buildpackage -uc -us ${BUILD_OPTS} -j$JOBS
            "
	)
	;;
    "test") # RIP build and regression tests
	BUILD_CL=( bash -xec "
            # Set up build:  \`autoconf\` and \`make\`
	    cd src;
	    ./autogen.sh;
	    ./configure --host=\$HOST_MULTIARCH;

            # Build
	    make -j${JOBS};

            # Set up runtime:  setuid, environment, ini
	    sudo make setuid >& /dev/null || true;
	    cd ..;
	    . scripts/rip-environment;
	    echo -e 'ANNOUNCE_IPV4=0\nANNOUNCE_IPV6=0' >> \
		etc/linuxcnc/machinekit.ini;
	    tail etc/linuxcnc/machinekit.ini;

            # Run regression tests
	    ${RUN_TESTS}"
	)
	;;
    *)   echo "Unkown command '$CMD'" >&2; exit 1 ;;
esac

###########################################################
# Run build

set -x  # Show user the command

# Run the Docker container as follows:
# - Privileged mode (probably not needed in Travis CI)
# - As Travis CI user/group
# - Bind-mount home directory for MK source and `~/.ccache`
# - Start in same directory
# - Set hostname to $IMAGE:$TAG, replacing / and : with -
# - Pass build-related environment variables
docker run \
    --rm -it \
    "${DOCKER_EXTRA_OPTS[@]}" \
    -u $DUID:$DGID -e USER=${USER} \
    -v ${HOME}:${HOME} -e HOME=${HOME} \
    -v ${BIND_SOURCE_DIR}:${BIND_SOURCE_DIR} -w ${PWD} \
    -e TAG=${TAG} \
    -h ${IMAGE//[\/:]/-}-${TAG} \
    ${IMAGE}:${TAG} \
    "${BUILD_CL[@]}"
